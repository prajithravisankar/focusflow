import { useContext, useMemo } from "react";import { useNavigate } from "react-router-dom";import SessionContext from "../context/SessionContext.jsx";import TaskContext from "../context/TaskContext.jsx";function Analytics() {  const navigate = useNavigate();  const { sessions = [] } = useContext(SessionContext);  const { tasks = [] } = useContext(TaskContext);  // Calculate all stats using useMemo to prevent infinite loops  const stats = useMemo(() => {    const now = new Date();        // Helper function to get start of day/week/month/year    const getDateRanges = () => {      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());      const thisWeek = new Date(now.getTime() - (now.getDay() * 24 * 60 * 60 * 1000));      thisWeek.setHours(0, 0, 0, 0);      const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);      const thisYear = new Date(now.getFullYear(), 0, 1);            return { today, thisWeek, thisMonth, thisYear };    };    const { today, thisWeek, thisMonth, thisYear } = getDateRanges();    // Filter tasks by time periods    const getTasksInPeriod = (startDate) => {      return tasks.filter(task => {        if (!task.createdAt) return false;        const taskDate = new Date(task.createdAt);        return taskDate >= startDate;      });    };    // Filter sessions by time periods    const getSessionsInPeriod = (startDate) => {      return sessions.filter(session => {        if (!session.startTime) return false;        const sessionDate = new Date(session.startTime);        return sessionDate >= startDate;      });    };    // Calculate completed tasks    const tasksCompletedToday = getTasksInPeriod(today).filter(task => task.completed).length;    const tasksCompletedThisWeek = getTasksInPeriod(thisWeek).filter(task => task.completed).length;    const tasksCompletedThisMonth = getTasksInPeriod(thisMonth).filter(task => task.completed).length;    const tasksCompletedThisYear = getTasksInPeriod(thisYear).filter(task => task.completed).length;    // Calculate time spent (in minutes)    const getTimeSpent = (startDate) => {      return getSessionsInPeriod(startDate).reduce((total, session) => {        return total + (session.duration || 0);      }, 0);    };    const timeSpentToday = getTimeSpent(today);    const timeSpentThisWeek = getTimeSpent(thisWeek);    const timeSpentThisMonth = getTimeSpent(thisMonth);    const timeSpentThisYear = getTimeSpent(thisYear);    return {      tasksCompletedToday,      tasksCompletedThisWeek,      tasksCompletedThisMonth,      tasksCompletedThisYear,      timeSpentToday,      timeSpentThisWeek,      timeSpentThisMonth,      timeSpentThisYear    };  }, [sessions.length, tasks.length]); // Only depend on array lengths to avoid infinite loops  // Format time helper  const formatTime = (minutes) => {    if (minutes === 0) return "0m";    if (minutes < 60) return `${minutes}m`;    const hours = Math.floor(minutes / 60);    const mins = minutes % 60;    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;  };  return (    <div className="bg-gray-50 py-8 px-4">      <div className="max-w-6xl mx-auto">        {/* Header */}        <div className="text-center mb-8">          <h1 className="text-4xl font-bold text-gray-800 mb-4">üìä Analytics Dashboard</h1>          <p className="text-gray-600">Your productivity insights at a glance</p>        </div>        {/* Tasks Completed Section */}        <div className="mb-8">          <h2 className="text-2xl font-bold text-gray-800 mb-6">üìã Tasks Completed</h2>          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">            <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-blue-600">{stats.tasksCompletedToday}</div>              <div className="text-gray-600 text-sm font-medium">Today</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-green-600">{stats.tasksCompletedThisWeek}</div>              <div className="text-gray-600 text-sm font-medium">This Week</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-purple-600">{stats.tasksCompletedThisMonth}</div>              <div className="text-gray-600 text-sm font-medium">This Month</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-orange-600">{stats.tasksCompletedThisYear}</div>              <div className="text-gray-600 text-sm font-medium">This Year</div>            </div>          </div>        </div>        {/* Time Spent Section */}        <div className="mb-8">          <h2 className="text-2xl font-bold text-gray-800 mb-6">‚è∞ Time Spent</h2>          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">            <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-blue-600">{formatTime(stats.timeSpentToday)}</div>              <div className="text-gray-600 text-sm font-medium">Today</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-green-600">{formatTime(stats.timeSpentThisWeek)}</div>              <div className="text-gray-600 text-sm font-medium">This Week</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-purple-600">{formatTime(stats.timeSpentThisMonth)}</div>              <div className="text-gray-600 text-sm font-medium">This Month</div>            </div>                        <div className="bg-white rounded-lg p-6 shadow-sm border">              <div className="text-3xl font-bold text-orange-600">{formatTime(stats.timeSpentThisYear)}</div>              <div className="text-gray-600 text-sm font-medium">This Year</div>            </div>          </div>        </div>        {/* Back to Dashboard Button */}        <div className="text-center">          <button            onClick={() => navigate("/dashboard")}            className="bg-blue-500 hover:bg-blue-600 text-white px-8 py-3 rounded-lg font-medium transition-colors duration-200"          >            ‚Üê Back to Dashboard          </button>        </div>      </div>    </div>  );}export default Analytics;